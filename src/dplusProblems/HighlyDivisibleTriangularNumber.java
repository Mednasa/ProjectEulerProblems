package dplusProblems;

public class HighlyDivisibleTriangularNumber {
    public static void main(String[] args) {
        /*
        The sequence of triangle numbers is generated by adding the natural numbers.
        So the 7th triangle number would be 1+2+3+4+5+6+7 = 28. The first terms would be:
        1,3,6,10,15,21,28,36,45,55
        Let us list the factors of the first seven triangle numbers:
        1:1
        3:1,3
        6:1,2,3,6
        10:1,2,5,10
        15:1,3,5,15
        21:1,3,7,21
        28:1,2,4,7,14,28

        We can see that 28 is the first triangle number to have over five divisors.
        What is the value of the first triangle number to have over five hundred divisors
         */

        long count = 0;
        int divisorCount = 0;
        int i = 1;

        while (divisorCount <= 500) {  //Will work until the number of divisors exceeds 500
            count += i;  // Update count value
            divisorCount = 0; //Reset divisorCount value to zero

            long j = 1;
            while (j * j <= count) { //Running as many loops as âˆšcount
                if (count % j == 0) {
                    divisorCount++;  //If j is a divisor, count
                    if (j != count / j) {
                        divisorCount++; //If the pair of j is also a divisor, count
                    }
                }
                j++;
            }
            i++;
        }

        System.out.println("Number = " + count);
        System.out.println("Divisor Count = " + divisorCount);

    }
}
